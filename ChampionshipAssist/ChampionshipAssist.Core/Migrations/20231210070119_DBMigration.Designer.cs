// <auto-generated />
using System;
using ChampionshipAssist.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChampionshipAssist.Domain.Migrations
{
    [DbContext(typeof(ChampionsshipAssistDbContext))]
    [Migration("20231210070119_DBMigration")]
    partial class DBMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("TournamentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "5347ce16-4dc5-4674-bbbc-5d908f9b8686",
                            Commentary = "Test1",
                            Rating = 5.0,
                            TournamentId = "9c7272cb-b425-4a3a-8b26-49964ea20b81",
                            UserId = "e0f01b43-de9a-4b1f-bea5-9880c56090d5"
                        },
                        new
                        {
                            Id = "1ee17889-a012-407a-89bc-a4c8e8547dac",
                            Commentary = "Test2",
                            Rating = 4.0,
                            TournamentId = "43e0540a-b10d-447b-92f6-cc665ff8ae14",
                            UserId = "aa2d7dc4-76e9-41a2-badb-1d2c1bc1c38b"
                        },
                        new
                        {
                            Id = "433a3cbd-8e83-402b-baf6-48c8c876c458",
                            Commentary = "Test3",
                            Rating = 3.0,
                            TournamentId = "7d4b5a3a-0ada-4db8-b43c-99e81aefbe56",
                            UserId = "3be42d94-1e2e-432d-971a-cae597376fa8"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsOpenToCybersportsmen")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOpenToUsers")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("VACBannedParticipantsAllowed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = "9c7272cb-b425-4a3a-8b26-49964ea20b81",
                            EndDate = new DateTime(2023, 12, 10, 10, 1, 18, 872, DateTimeKind.Local).AddTicks(5011),
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Test1",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 10, 10, 1, 18, 872, DateTimeKind.Local).AddTicks(4979)
                        },
                        new
                        {
                            Id = "43e0540a-b10d-447b-92f6-cc665ff8ae14",
                            EndDate = new DateTime(2023, 12, 10, 10, 1, 18, 872, DateTimeKind.Local).AddTicks(5016),
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = false,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Test2",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 10, 10, 1, 18, 872, DateTimeKind.Local).AddTicks(5015)
                        },
                        new
                        {
                            Id = "7d4b5a3a-0ada-4db8-b43c-99e81aefbe56",
                            EndDate = new DateTime(2023, 12, 10, 10, 1, 18, 872, DateTimeKind.Local).AddTicks(5019),
                            IsOpenToCybersportsmen = false,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Test3",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 10, 10, 1, 18, 872, DateTimeKind.Local).AddTicks(5019)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97e4db8a-728b-4428-9f30-5cd2a1ad86f5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "09d4bd83-f958-48eb-a51f-5012296fe2e5",
                            Name = "Cybersportsman",
                            NormalizedName = "CYBERSPORTSMAN"
                        },
                        new
                        {
                            Id = "4e645d52-5d6b-4ba9-a74b-0b1a9910c5c5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e0f01b43-de9a-4b1f-bea5-9880c56090d5",
                            RoleId = "97e4db8a-728b-4428-9f30-5cd2a1ad86f5"
                        },
                        new
                        {
                            UserId = "e0f01b43-de9a-4b1f-bea5-9880c56090d5",
                            RoleId = "09d4bd83-f958-48eb-a51f-5012296fe2e5"
                        },
                        new
                        {
                            UserId = "aa2d7dc4-76e9-41a2-badb-1d2c1bc1c38b",
                            RoleId = "09d4bd83-f958-48eb-a51f-5012296fe2e5"
                        },
                        new
                        {
                            UserId = "3be42d94-1e2e-432d-971a-cae597376fa8",
                            RoleId = "09d4bd83-f958-48eb-a51f-5012296fe2e5"
                        },
                        new
                        {
                            UserId = "3be42d94-1e2e-432d-971a-cae597376fa8",
                            RoleId = "4e645d52-5d6b-4ba9-a74b-0b1a9910c5c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TournamentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ParticipantsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("BanCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BanDuration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Documents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVACBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "e0f01b43-de9a-4b1f-bea5-9880c56090d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba879292-c4bf-4e5f-a69b-cca1352e1d3a",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ZATEBON",
                            PasswordHash = "AQAAAAIAAYagAAAAEMc6Rwz6n86D3Jnbuq2ekH3HvmHHhNrtU0OontC/t3eHefxQy6gk5+Vz2Lk9CRX00w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "387f29fd-c6a9-4c11-840e-0510a15e616f",
                            TwoFactorEnabled = false,
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 10, 10, 1, 18, 612, DateTimeKind.Local).AddTicks(8145),
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "zatebon",
                            SteamLink = "https://steamcommunity.com/id/zatebon/"
                        },
                        new
                        {
                            Id = "aa2d7dc4-76e9-41a2-badb-1d2c1bc1c38b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7ce060d-78a7-4a7d-a3ab-75135396390a",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CYBER@EXAMPLE.COM",
                            NormalizedUserName = "GABE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVW2cPF173qN4DBMsEXQZpaggW6VlgxUkLSYOaIG/ssrQhHimmqZD0c8eBEGORqvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b01e8fd1-a79b-4345-8ae3-2b64d0f9eab0",
                            TwoFactorEnabled = false,
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 10, 10, 1, 18, 612, DateTimeKind.Local).AddTicks(8138),
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "Gabe",
                            SteamLink = "https://steamcommunity.com/id/Gabe/"
                        },
                        new
                        {
                            Id = "3be42d94-1e2e-432d-971a-cae597376fa8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c9df006-e3bc-40f6-8fee-a8a29f320a4a",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "BUDDING",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+XyhK7MiBkSdXGaQnlEnlwj7yUSBUH7dV7/5u34PdVZdIb4goenEPlTZR75T3/LQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ebdbb16e-88dd-47b7-a6d5-46818a7971ee",
                            TwoFactorEnabled = false,
                            UserName = "Budding",
                            BanCount = 1,
                            BanDuration = new DateTime(2023, 12, 10, 10, 1, 18, 612, DateTimeKind.Local).AddTicks(8119),
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = true,
                            SteamLink = "https://steamcommunity.com/id/Budding/"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", "Tournament")
                        .WithMany("Reviews")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChampionshipAssist.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
