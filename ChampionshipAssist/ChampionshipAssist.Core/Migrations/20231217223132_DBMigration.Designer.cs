// <auto-generated />
using System;
using ChampionshipAssist.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChampionshipAssist.Domain.Migrations
{
    [DbContext(typeof(ChampionshipAssistDbContext))]
    [Migration("20231217223132_DBMigration")]
    partial class DBMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("TournamentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "e8bbd55c-21c7-44b6-8d22-e7473499ce55",
                            Commentary = "Great tournament so far.",
                            Rating = 5.0,
                            TournamentId = "0b03cdb5-cccf-4c10-bac0-b8f5dbdfc09a",
                            UserId = "555ca63b-26ba-4e5b-8eda-53f7b7a381fc"
                        },
                        new
                        {
                            Id = "425dc403-71c2-4e00-bce3-4832030b8290",
                            Commentary = "Could be better a bit.",
                            Rating = 4.0,
                            TournamentId = "f97c9551-4638-455e-bb1b-4701646905fb",
                            UserId = "3981bd44-b8a0-4d6e-b349-cda4721c1650"
                        },
                        new
                        {
                            Id = "538e993f-a29b-41aa-965d-a2020bb46289",
                            Commentary = "Could be worse.",
                            Rating = 3.0,
                            TournamentId = "8b472c53-c9e2-4538-a2e7-e7382696ef51",
                            UserId = "039f297a-9281-4aaf-bcdb-b20a8a8fdda1"
                        },
                        new
                        {
                            Id = "c1fe16ee-c13d-4a80-822f-161d1887c360",
                            Commentary = "Worst one so far.",
                            Rating = 1.0,
                            TournamentId = "8b472c53-c9e2-4538-a2e7-e7382696ef51",
                            UserId = "3981bd44-b8a0-4d6e-b349-cda4721c1650"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Game")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpenToCybersportsmen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenToUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("VACBannedParticipantsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = "0b03cdb5-cccf-4c10-bac0-b8f5dbdfc09a",
                            EndDate = new DateTime(2024, 1, 1, 0, 31, 31, 783, DateTimeKind.Local).AddTicks(3873),
                            Game = "Counter-Strike 1.6",
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Winter Turnir 2023",
                            OrganizerId = "3981bd44-b8a0-4d6e-b349-cda4721c1650",
                            Rules = "Test1",
                            ShortDesc = "Small tournament",
                            StartDate = new DateTime(2023, 12, 18, 0, 31, 31, 783, DateTimeKind.Local).AddTicks(3809),
                            VACBannedParticipantsAllowed = false
                        },
                        new
                        {
                            Id = "f97c9551-4638-455e-bb1b-4701646905fb",
                            EndDate = new DateTime(2025, 1, 1, 0, 31, 31, 783, DateTimeKind.Local).AddTicks(3886),
                            Game = "Counter-Strike: Global Offensive",
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = false,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "IEM Katowice 2024",
                            OrganizerId = "039f297a-9281-4aaf-bcdb-b20a8a8fdda1",
                            Rules = "Test1",
                            ShortDesc = "Big tournament for cybersportsmen only.",
                            StartDate = new DateTime(2024, 12, 18, 0, 31, 31, 783, DateTimeKind.Local).AddTicks(3881),
                            VACBannedParticipantsAllowed = false
                        },
                        new
                        {
                            Id = "8b472c53-c9e2-4538-a2e7-e7382696ef51",
                            EndDate = new DateTime(2023, 12, 18, 0, 32, 31, 783, DateTimeKind.Local).AddTicks(3893),
                            Game = "Counter-Strike 1.6",
                            IsOpenToCybersportsmen = false,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "ChampionshipAssist test tournament",
                            OrganizerId = "039f297a-9281-4aaf-bcdb-b20a8a8fdda1",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 18, 0, 31, 31, 783, DateTimeKind.Local).AddTicks(3891),
                            VACBannedParticipantsAllowed = true,
                            WinnerId = "039f297a-9281-4aaf-bcdb-b20a8a8fdda1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cdfc76d1-f3a3-410f-9419-47b45a63909c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1e7602df-355b-4c15-bb7b-68cd965e44be",
                            Name = "Cybersportsman",
                            NormalizedName = "CYBERSPORTSMAN"
                        },
                        new
                        {
                            Id = "3ab5abbb-f7dc-42ee-a8f7-1677b0eca325",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "555ca63b-26ba-4e5b-8eda-53f7b7a381fc",
                            RoleId = "cdfc76d1-f3a3-410f-9419-47b45a63909c"
                        },
                        new
                        {
                            UserId = "555ca63b-26ba-4e5b-8eda-53f7b7a381fc",
                            RoleId = "1e7602df-355b-4c15-bb7b-68cd965e44be"
                        },
                        new
                        {
                            UserId = "3981bd44-b8a0-4d6e-b349-cda4721c1650",
                            RoleId = "1e7602df-355b-4c15-bb7b-68cd965e44be"
                        },
                        new
                        {
                            UserId = "039f297a-9281-4aaf-bcdb-b20a8a8fdda1",
                            RoleId = "1e7602df-355b-4c15-bb7b-68cd965e44be"
                        },
                        new
                        {
                            UserId = "039f297a-9281-4aaf-bcdb-b20a8a8fdda1",
                            RoleId = "3ab5abbb-f7dc-42ee-a8f7-1677b0eca325"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TournamentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ParticipantsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("BanCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BanDuration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVACBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "555ca63b-26ba-4e5b-8eda-53f7b7a381fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e8a4086-6edc-4a1f-8177-9267121b4c83",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ZATEBON",
                            PasswordHash = "AQAAAAIAAYagAAAAEKLuMf8KtgZfMyQeCLLDy5Tek+YzJFNtPpKWlCwOTaAi01oqgV7z6t5lAcBaDZZabA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dafbb2e6-888b-456d-809d-93b1ea2550a0",
                            TwoFactorEnabled = false,
                            UserName = "zatebon",
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 18, 0, 31, 31, 512, DateTimeKind.Local).AddTicks(6343),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "zatebon",
                            Role = "Admin",
                            SteamLink = "https://steamcommunity.com/id/zatebon/"
                        },
                        new
                        {
                            Id = "3981bd44-b8a0-4d6e-b349-cda4721c1650",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3321a813-a4ac-4aee-9cc3-22b4d4531c56",
                            Email = "cyber@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CYBER@EXAMPLE.COM",
                            NormalizedUserName = "GABE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZGo/EBx8RdTLQChx8pXTNXHFr2unEB7yCxnusAjVuUOKAFFKtYFk7S5A0Ja443RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa66cf33-cda8-46f4-bd2f-ef7daadee350",
                            TwoFactorEnabled = false,
                            UserName = "Gabe",
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 18, 0, 31, 31, 512, DateTimeKind.Local).AddTicks(6334),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "Gabe",
                            Role = "Cybersportsman",
                            SteamLink = "https://steamcommunity.com/id/Gabe/"
                        },
                        new
                        {
                            Id = "039f297a-9281-4aaf-bcdb-b20a8a8fdda1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7af73542-fab9-43bf-b435-64beb8223932",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "BUDDING",
                            PasswordHash = "AQAAAAIAAYagAAAAEGbyCYiIQELQMfpYD+YQ7sJH6V78/qUeqx7zLVZlgL4OfmX9e/gN2JjECpNECnFBXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d6a00b1-b911-469b-8449-824236ef5589",
                            TwoFactorEnabled = false,
                            UserName = "Budding",
                            BanCount = 1,
                            BanDuration = new DateTime(2023, 12, 18, 0, 31, 31, 512, DateTimeKind.Local).AddTicks(6279),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = true,
                            Name = "Budding",
                            Role = "User",
                            SteamLink = "https://steamcommunity.com/id/Budding/"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", "Tournament")
                        .WithMany("Reviews")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChampionshipAssist.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
