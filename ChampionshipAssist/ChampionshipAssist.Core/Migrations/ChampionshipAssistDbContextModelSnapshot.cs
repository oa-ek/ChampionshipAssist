// <auto-generated />
using System;
using ChampionshipAssist.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChampionshipAssist.Domain.Migrations
{
    [DbContext(typeof(ChampionshipAssistDbContext))]
    partial class ChampionshipAssistDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("TournamentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "4783df8f-b513-4cc5-bb19-21da0ce2b88a",
                            Commentary = "Great tournament so far.",
                            Rating = 5.0,
                            TournamentId = "a44a5942-9f6a-4224-a718-2684c24a5619",
                            UserId = "8cda2989-5039-4806-b4a9-bfb1ac6cdd9f"
                        },
                        new
                        {
                            Id = "695ed085-f7bf-44bd-bc95-24b8f58989f5",
                            Commentary = "Could be better a bit.",
                            Rating = 4.0,
                            TournamentId = "453ad7eb-9aa0-4af3-87d6-2dc04425fc0b",
                            UserId = "1c8ac453-a106-4505-a91a-3994a69c2531"
                        },
                        new
                        {
                            Id = "6c0a6e78-eb97-431e-b0b4-770ef9adab0e",
                            Commentary = "Could be worse.",
                            Rating = 3.0,
                            TournamentId = "e8686e75-f513-49b8-a1ee-b49df3e87f5b",
                            UserId = "4c3e8446-b9f5-4678-b641-4bd70a101656"
                        },
                        new
                        {
                            Id = "1ccd77b6-1e06-46ed-811a-6ce6937e96b1",
                            Commentary = "Worst one so far.",
                            Rating = 1.0,
                            TournamentId = "e8686e75-f513-49b8-a1ee-b49df3e87f5b",
                            UserId = "1c8ac453-a106-4505-a91a-3994a69c2531"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Game")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpenToCybersportsmen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenToUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("VACBannedParticipantsAllowed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = "a44a5942-9f6a-4224-a718-2684c24a5619",
                            EndDate = new DateTime(2024, 1, 10, 8, 30, 2, 827, DateTimeKind.Local).AddTicks(5291),
                            Game = "Counter-Strike 1.6",
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Winter Turnir 2023",
                            OrganizerId = "1c8ac453-a106-4505-a91a-3994a69c2531",
                            Rules = "Test1",
                            ShortDesc = "Small tournament",
                            StartDate = new DateTime(2023, 12, 27, 8, 30, 2, 827, DateTimeKind.Local).AddTicks(5214),
                            VACBannedParticipantsAllowed = false
                        },
                        new
                        {
                            Id = "453ad7eb-9aa0-4af3-87d6-2dc04425fc0b",
                            EndDate = new DateTime(2025, 1, 10, 8, 30, 2, 827, DateTimeKind.Local).AddTicks(5310),
                            Game = "Counter-Strike: Global Offensive",
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = false,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "IEM Katowice 2024",
                            OrganizerId = "4c3e8446-b9f5-4678-b641-4bd70a101656",
                            Rules = "Test1",
                            ShortDesc = "Big tournament for cybersportsmen only.",
                            StartDate = new DateTime(2024, 12, 27, 8, 30, 2, 827, DateTimeKind.Local).AddTicks(5304),
                            VACBannedParticipantsAllowed = false
                        },
                        new
                        {
                            Id = "e8686e75-f513-49b8-a1ee-b49df3e87f5b",
                            EndDate = new DateTime(2023, 12, 27, 8, 31, 2, 827, DateTimeKind.Local).AddTicks(5321),
                            Game = "Counter-Strike 1.6",
                            IsOpenToCybersportsmen = false,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "ChampionshipAssist test tournament",
                            OrganizerId = "4c3e8446-b9f5-4678-b641-4bd70a101656",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 27, 8, 30, 2, 827, DateTimeKind.Local).AddTicks(5318),
                            VACBannedParticipantsAllowed = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a53c99fc-3478-43aa-9868-78031be30516",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "81c40b6d-807e-4781-a20a-8e3cfa311855",
                            Name = "Cybersportsman",
                            NormalizedName = "CYBERSPORTSMAN"
                        },
                        new
                        {
                            Id = "bb3c8ed4-2181-4bbd-b11c-7176a5a8c068",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8cda2989-5039-4806-b4a9-bfb1ac6cdd9f",
                            RoleId = "a53c99fc-3478-43aa-9868-78031be30516"
                        },
                        new
                        {
                            UserId = "8cda2989-5039-4806-b4a9-bfb1ac6cdd9f",
                            RoleId = "81c40b6d-807e-4781-a20a-8e3cfa311855"
                        },
                        new
                        {
                            UserId = "1c8ac453-a106-4505-a91a-3994a69c2531",
                            RoleId = "81c40b6d-807e-4781-a20a-8e3cfa311855"
                        },
                        new
                        {
                            UserId = "4c3e8446-b9f5-4678-b641-4bd70a101656",
                            RoleId = "81c40b6d-807e-4781-a20a-8e3cfa311855"
                        },
                        new
                        {
                            UserId = "4c3e8446-b9f5-4678-b641-4bd70a101656",
                            RoleId = "bb3c8ed4-2181-4bbd-b11c-7176a5a8c068"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TournamentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ParticipantsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("BanCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BanDuration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVACBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "8cda2989-5039-4806-b4a9-bfb1ac6cdd9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "990163a4-ce93-4c07-8905-d82905a07718",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ZATEBON",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKR0v88p6OO7Q91peD5CPn8vDslIXWqsJsG8N+E13wYJY52sz5O86xFCGXi+KBasg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3e816d6-7a63-4253-a3eb-fd8db5d92839",
                            TwoFactorEnabled = false,
                            UserName = "zatebon",
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 27, 8, 30, 2, 568, DateTimeKind.Local).AddTicks(987),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "zatebon",
                            Role = "Admin",
                            SteamLink = "https://steamcommunity.com/id/zatebon/"
                        },
                        new
                        {
                            Id = "1c8ac453-a106-4505-a91a-3994a69c2531",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f75ac399-4e48-4656-a2b2-635326c2ffd4",
                            Email = "cyber@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CYBER@EXAMPLE.COM",
                            NormalizedUserName = "GABE",
                            PasswordHash = "AQAAAAIAAYagAAAAENK32Z0ybZZjRFV8WYKGRaJR6It+WNStvMDR0T4LXWgaLTWQnAXeFMnnv/6jdK85Ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f531c818-c25f-451e-98eb-344477443a22",
                            TwoFactorEnabled = false,
                            UserName = "Gabe",
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 27, 8, 30, 2, 568, DateTimeKind.Local).AddTicks(971),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "Gabe",
                            Role = "Cybersportsman",
                            SteamLink = "https://steamcommunity.com/id/Gabe/"
                        },
                        new
                        {
                            Id = "4c3e8446-b9f5-4678-b641-4bd70a101656",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac5d42e0-416c-4014-b617-2c2ff3e9d2bf",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "BUDDING",
                            PasswordHash = "AQAAAAIAAYagAAAAEFedALHLm96v/CA6BCTvJmTDNSHfJhUA9FUIkGAosatR02ID2TYCBxwwsZ8kuTwAEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abb4f05d-09cd-4c50-89f3-0555319c25c7",
                            TwoFactorEnabled = false,
                            UserName = "Budding",
                            BanCount = 1,
                            BanDuration = new DateTime(2023, 12, 27, 8, 30, 2, 568, DateTimeKind.Local).AddTicks(906),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = true,
                            Name = "Budding",
                            Role = "User",
                            SteamLink = "https://steamcommunity.com/id/Budding/"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", "Tournament")
                        .WithMany("Reviews")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChampionshipAssist.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
