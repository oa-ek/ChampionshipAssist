// <auto-generated />
using System;
using ChampionshipAssist.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChampionshipAssist.Domain.Migrations
{
    [DbContext(typeof(ChampionsshipAssistDbContext))]
    partial class ChampionsshipAssistDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("TournamentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TournamentId1")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId1");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Commentary = "Test1",
                            Rating = 5.0,
                            TournamentId = "1",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            Commentary = "Test2",
                            Rating = 4.0,
                            TournamentId = "2",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            Commentary = "Test3",
                            Rating = 3.0,
                            TournamentId = "3",
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsOpenToCybersportsmen")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOpenToUsers")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("VACBannedParticipantsAllowed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(544),
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Test1",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(522)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(553),
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = false,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Test2",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(552)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(558),
                            IsOpenToCybersportsmen = false,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Test3",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(557)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6c567f5a-9f6e-4e12-a893-03a8849f7e83",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "72b54dda-4bff-4c5c-869e-2930a277a622",
                            Name = "Cybersportsman",
                            NormalizedName = "CYBERSPORTSMAN"
                        },
                        new
                        {
                            Id = "14e23ce1-2ccb-4fca-955f-58bcfc355040",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "30fea090-9e84-4393-a750-52bcb9086857",
                            RoleId = "6c567f5a-9f6e-4e12-a893-03a8849f7e83"
                        },
                        new
                        {
                            UserId = "30fea090-9e84-4393-a750-52bcb9086857",
                            RoleId = "72b54dda-4bff-4c5c-869e-2930a277a622"
                        },
                        new
                        {
                            UserId = "ebeee128-7355-4f92-8135-e8a9b25cb7a3",
                            RoleId = "72b54dda-4bff-4c5c-869e-2930a277a622"
                        },
                        new
                        {
                            UserId = "23c91224-f66e-4219-ab2a-80d8ee7473be",
                            RoleId = "72b54dda-4bff-4c5c-869e-2930a277a622"
                        },
                        new
                        {
                            UserId = "23c91224-f66e-4219-ab2a-80d8ee7473be",
                            RoleId = "14e23ce1-2ccb-4fca-955f-58bcfc355040"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("BanCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BanDuration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Documents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVACBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "30fea090-9e84-4393-a750-52bcb9086857",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b94a92c2-5f53-4d82-91ac-9a4ee00db737",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ZATEBON",
                            PasswordHash = "AQAAAAIAAYagAAAAEOwfHfWSm5aUGUG7W47OaYhTd1gZLvoaR74OscywFcPu7o72pSb6uOGUOkktHv29wQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a02bb5ab-ee1a-4578-899a-57ddbf2d5af8",
                            TwoFactorEnabled = false,
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(825),
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "zatebon",
                            SteamLink = "https://steamcommunity.com/id/zatebon/"
                        },
                        new
                        {
                            Id = "ebeee128-7355-4f92-8135-e8a9b25cb7a3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8ca965-fc0b-4ec4-9fa6-cd0e29d99942",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CYBER@EXAMPLE.COM",
                            NormalizedUserName = "GABE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJNBTsxkd9ZqWyXR98nTbUijye0XfuAB4cT6m84yJYfprljZeVHfKdh2WPsytdCzTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51483ee6-70a6-4bef-8661-dce5169c5603",
                            TwoFactorEnabled = false,
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(807),
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "Gabe",
                            SteamLink = "https://steamcommunity.com/id/Gabe/"
                        },
                        new
                        {
                            Id = "23c91224-f66e-4219-ab2a-80d8ee7473be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e454b42-661b-43ce-aede-2ca059464f21",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "BUDDING",
                            PasswordHash = "AQAAAAIAAYagAAAAEF3oBLvsgeYW+0DMk2mAbmjkWPOSPeXerKH+O9QoFXmf/zuM/2QCKcAn9yWoWrGabw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e510dea-c504-44fe-b118-8a8858bf6324",
                            TwoFactorEnabled = false,
                            UserName = "Budding",
                            BanCount = 1,
                            BanDuration = new DateTime(2023, 12, 10, 1, 48, 5, 621, DateTimeKind.Local).AddTicks(792),
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = true,
                            SteamLink = "https://steamcommunity.com/id/Budding/"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", "Tournament")
                        .WithMany("Reviews")
                        .HasForeignKey("TournamentId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChampionshipAssist.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
