// <auto-generated />
using System;
using ChampionshipAssist.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChampionshipAssist.Domain.Migrations
{
    [DbContext(typeof(ChampionshipAssistDbContext))]
    [Migration("20231210213103_DBMigration")]
    partial class DBMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("TournamentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "ce540c75-9781-46e0-aef1-c37234a4d1cc",
                            Commentary = "Great tournament so far.",
                            Rating = 5.0,
                            TournamentId = "832596c8-5e74-483d-ae22-eac37fff332c",
                            UserId = "701dc543-0ea4-4d7f-bdf2-55484669b302"
                        },
                        new
                        {
                            Id = "fb596014-a95b-4073-aaf9-a55dda519043",
                            Commentary = "Could be better a bit.",
                            Rating = 4.0,
                            TournamentId = "6bd4a72d-b4b4-47f5-aa9b-067bb7303f46",
                            UserId = "3dc4f82a-7647-4ea3-94a4-87ff8b9a8c93"
                        },
                        new
                        {
                            Id = "8225d2ae-ba5b-46b7-be48-182e1f11b4f5",
                            Commentary = "Could be worse.",
                            Rating = 3.0,
                            TournamentId = "b47efd7e-5312-46da-81ac-2ff9d3676c87",
                            UserId = "a0e55193-a65f-4cf3-a090-8f25b7c8ce97"
                        },
                        new
                        {
                            Id = "d597e7e0-c52b-4092-92c6-fbddfbbdd243",
                            Commentary = "Worst one so far.",
                            Rating = 1.0,
                            TournamentId = "b47efd7e-5312-46da-81ac-2ff9d3676c87",
                            UserId = "3dc4f82a-7647-4ea3-94a4-87ff8b9a8c93"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Game")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOpenToCybersportsmen")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOpenToUsers")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("VACBannedParticipantsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = "832596c8-5e74-483d-ae22-eac37fff332c",
                            EndDate = new DateTime(2023, 12, 24, 23, 31, 3, 389, DateTimeKind.Local).AddTicks(6522),
                            Game = "Counter-Strike 1.6",
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "Winter Turnir 2023",
                            OrganizerId = "3dc4f82a-7647-4ea3-94a4-87ff8b9a8c93",
                            Rules = "Test1",
                            ShortDesc = "Small tournament",
                            StartDate = new DateTime(2023, 12, 10, 23, 31, 3, 389, DateTimeKind.Local).AddTicks(6469),
                            VACBannedParticipantsAllowed = false
                        },
                        new
                        {
                            Id = "6bd4a72d-b4b4-47f5-aa9b-067bb7303f46",
                            EndDate = new DateTime(2024, 12, 24, 23, 31, 3, 389, DateTimeKind.Local).AddTicks(6540),
                            Game = "Counter-Strike: Global Offensive",
                            IsOpenToCybersportsmen = true,
                            IsOpenToUsers = false,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "IEM Katowice 2024",
                            OrganizerId = "a0e55193-a65f-4cf3-a090-8f25b7c8ce97",
                            Rules = "Test1",
                            ShortDesc = "Big tournament for cybersportsmen only.",
                            StartDate = new DateTime(2024, 12, 10, 23, 31, 3, 389, DateTimeKind.Local).AddTicks(6532),
                            VACBannedParticipantsAllowed = false
                        },
                        new
                        {
                            Id = "b47efd7e-5312-46da-81ac-2ff9d3676c87",
                            EndDate = new DateTime(2023, 12, 10, 23, 32, 3, 389, DateTimeKind.Local).AddTicks(6547),
                            Game = "Counter-Strike 1.6",
                            IsOpenToCybersportsmen = false,
                            IsOpenToUsers = true,
                            IsPrivate = false,
                            LongDesc = "Long description.",
                            Name = "ChampionshipAssist test tournament",
                            OrganizerId = "a0e55193-a65f-4cf3-a090-8f25b7c8ce97",
                            Rules = "Test1",
                            ShortDesc = "Short description.",
                            StartDate = new DateTime(2023, 12, 10, 23, 31, 3, 389, DateTimeKind.Local).AddTicks(6545),
                            VACBannedParticipantsAllowed = true,
                            WinnerId = "a0e55193-a65f-4cf3-a090-8f25b7c8ce97"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b717d7b0-02e7-44a2-b05c-4126e085e762",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9bb1ba55-7bf2-45d5-bc2e-00147f0bdd52",
                            Name = "Cybersportsman",
                            NormalizedName = "CYBERSPORTSMAN"
                        },
                        new
                        {
                            Id = "101e856d-0608-411c-85fd-507f6253a2bf",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "701dc543-0ea4-4d7f-bdf2-55484669b302",
                            RoleId = "b717d7b0-02e7-44a2-b05c-4126e085e762"
                        },
                        new
                        {
                            UserId = "701dc543-0ea4-4d7f-bdf2-55484669b302",
                            RoleId = "9bb1ba55-7bf2-45d5-bc2e-00147f0bdd52"
                        },
                        new
                        {
                            UserId = "3dc4f82a-7647-4ea3-94a4-87ff8b9a8c93",
                            RoleId = "9bb1ba55-7bf2-45d5-bc2e-00147f0bdd52"
                        },
                        new
                        {
                            UserId = "a0e55193-a65f-4cf3-a090-8f25b7c8ce97",
                            RoleId = "9bb1ba55-7bf2-45d5-bc2e-00147f0bdd52"
                        },
                        new
                        {
                            UserId = "a0e55193-a65f-4cf3-a090-8f25b7c8ce97",
                            RoleId = "101e856d-0608-411c-85fd-507f6253a2bf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TournamentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ParticipantsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("BanCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BanDuration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVACBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "701dc543-0ea4-4d7f-bdf2-55484669b302",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7af54871-6a9e-4e82-8d48-9790fe0954ce",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ZATEBON",
                            PasswordHash = "AQAAAAIAAYagAAAAENa9SSf2VUuvdUOmCVMRoduYcUXkUK9IJ5BwdLSF6KWXggONPRldlhsDD6N97KQnug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48b47159-1032-42df-afd1-2cbf8c2317e9",
                            TwoFactorEnabled = false,
                            UserName = "zatebon",
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 10, 23, 31, 3, 148, DateTimeKind.Local).AddTicks(9062),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "zatebon",
                            SteamLink = "https://steamcommunity.com/id/zatebon/"
                        },
                        new
                        {
                            Id = "3dc4f82a-7647-4ea3-94a4-87ff8b9a8c93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd49eef7-3afc-4b70-9d1d-56e86b473663",
                            Email = "cyber@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CYBER@EXAMPLE.COM",
                            NormalizedUserName = "GABE",
                            PasswordHash = "AQAAAAIAAYagAAAAEK/LMM9giSiEVAAplx/DcgzlHuqa1hYRPBLm1LpHFSsUjFrH/fNFrnIzY38v8VgBXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6e8a779-d3fb-431d-b6e7-560e03a5b25b",
                            TwoFactorEnabled = false,
                            UserName = "Gabe",
                            BanCount = 0,
                            BanDuration = new DateTime(2023, 12, 10, 23, 31, 3, 148, DateTimeKind.Local).AddTicks(9054),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = false,
                            Name = "Gabe",
                            SteamLink = "https://steamcommunity.com/id/Gabe/"
                        },
                        new
                        {
                            Id = "a0e55193-a65f-4cf3-a090-8f25b7c8ce97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6787b79b-15b9-4eb3-88d1-58ebe67be132",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "BUDDING",
                            PasswordHash = "AQAAAAIAAYagAAAAEORV+UuuFVJalpLjkQ9Xncu+pMY3QhImQEmplBtXhJA+FJXGNn7gY5nw9oyOqjfy/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23dc5fad-5ae9-4686-8b19-fe1bd968ba29",
                            TwoFactorEnabled = false,
                            UserName = "Budding",
                            BanCount = 1,
                            BanDuration = new DateTime(2023, 12, 10, 23, 31, 3, 148, DateTimeKind.Local).AddTicks(9002),
                            Bio = "This user haven't set up this thing yet.",
                            Documents = "",
                            IsBanned = false,
                            IsVACBanned = true,
                            Name = "Budding",
                            SteamLink = "https://steamcommunity.com/id/Budding/"
                        });
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Review", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", "Tournament")
                        .WithMany("Reviews")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChampionshipAssist.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("ChampionshipAssist.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChampionshipAssist.Core.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionshipAssist.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
